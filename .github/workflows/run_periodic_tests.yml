# Run all unit tests and integration tests for all Python versions
# and platforms at 3am UTC every day and on PRs to the main branch
name: Scheduled

on:
  workflow_dispatch:
  pull_request:
    branches:
    - main

  # Run every day at 3 am UTC
  schedule:
    - cron: "0 3 * * *"

env:
  FORCE_COLOR: 3

concurrency:
  # github.workflow: name of the workflow, so that we don't cancel other workflows
  # github.event.pull_request.number || github.ref: pull request number or branch name if not a pull request
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  # Cancel in-progress runs when a new workflow with the same group name is triggered
  # This avoids workflow runs on both pushes and PRs
  cancel-in-progress: true

jobs:
  style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Check style
        run: |
          python -m pip install pre-commit
          pre-commit run -a

  build:
    needs: style
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        # Include macOS M1 runners
        include:
          - os: macos-14
            python-version: "3.10"
          - os: macos-14
            python-version: "3.11"
          - os: macos-14
            python-version: "3.12"

    steps:
      - name: Check out PyBaMM repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linux system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install gfortran gcc libopenblas-dev graphviz pandoc
          sudo apt install texlive-full

      - name: Install macOS system dependencies
        if: matrix.os == 'macos-12' || matrix.os == 'macos-14'
        run: |
          brew analytics off
          brew install graphviz libomp
          brew reinstall gcc

      - name: Install Windows system dependencies
        if: matrix.os == 'windows-latest'
        run: choco install graphviz --version=2.38.0.20190211

      - name: Install nox
        run: python -m pip install nox

      - name: Install SuiteSparse and SUNDIALS on GNU/Linux and macOS
        timeout-minutes: 10
        if: matrix.os != 'windows-latest'
        run: python -m nox -s pybamm-requires

      - name: Run unit tests for GNU/Linux, macOS, and Windows with all Python versions
        if: (matrix.os == 'ubuntu-latest' && matrix.python-version != 3.11) || (matrix.os != 'ubuntu-latest')
        run: python -m nox -s unit

      - name: Run unit tests for GNU/Linux with Python 3.11 and generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        run: python -m nox -s coverage

      - name: Upload coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.11
        uses: codecov/codecov-action@v4.3.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run integration tests
        run: python -m nox -s integration

      - name: Install docs dependencies and run doctests
        if: matrix.os == 'ubuntu-latest'
        run: python -m nox -s doctests

      - name: Check if the documentation can be built
        if: matrix.os == 'ubuntu-latest'
        run: python -m nox -s docs

      - name: Install dev dependencies and run example tests
        if: matrix.os == 'ubuntu-latest'
        run: python -m nox -s examples

      - name: Run example scripts tests
        if: matrix.os == 'ubuntu-latest'
        run: python -m nox -s scripts

  # M-series Mac Mini
  build-apple-mseries:
    if: github.repository_owner == 'pybamm-team'
    needs: style
    runs-on: [self-hosted, macOS, ARM64]
    env:
      GITHUB_PATH: ${PYENV_ROOT/bin:$PATH}
      LD_LIBRARY_PATH: $HOME/.local/lib
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Install Python & create virtualenv
        shell: bash
        run: |
          eval "$(pyenv init -)"
          pyenv install ${{ matrix.python-version }} -s
          pyenv virtualenv ${{ matrix.python-version }} pybamm-${{ matrix.python-version }}

      - name: Install build-time dependencies & run unit tests for M-series macOS runner
        shell: bash
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          NONINTERACTIVE: 1
        run: |
          eval "$(pyenv init -)"
          pyenv activate pybamm-${{ matrix.python-version }}
          python -m pip install --upgrade pip nox
          python -m nox -s pybamm-requires -- --force
          python -m nox -s unit

      - name: Run integration tests for M-series macOS runner
        run: |
          eval "$(pyenv init -)"
          pyenv activate pybamm-${{ matrix.python-version }}
          python -m nox -s integration

      - name: Uninstall pyenv-virtualenv & Python
        if: always()
        shell: bash
        run: |
          eval "$(pyenv init -)"
          pyenv activate pybamm-${{ matrix.python-version }}
          pyenv uninstall -f $( python --version )
